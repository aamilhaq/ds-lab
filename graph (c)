#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

typedef struct Node {
    int vertex;
    struct Node* next;
} Node;

typedef struct {
    Node* head;
} AdjList;

typedef struct {
    int numVertices;
    AdjList* array;
} Graph;

Node* createNode(int vertex) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->vertex = vertex;
    newNode->next = NULL;
    return newNode;
}

Graph* createGraph(int numVertices) {
    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->numVertices = numVertices;
    
    graph->array = (AdjList*)malloc(numVertices * sizeof(AdjList));
    
    for (int i = 0; i < numVertices; ++i) {
        graph->array[i].head = NULL;
    }
    
    return graph;
}

void addEdge(Graph* graph, int src, int dest) {
    Node* newNode = createNode(dest);
    newNode->next = graph->array[src].head;
    graph->array[src].head = newNode;
}
void DFSUtil(Graph* graph, int vertex, int visited[]) {
    visited[vertex] = 1;
    printf("%d ", vertex);

    Node* current = graph->array[vertex].head;
    while (current != NULL) {
        if (!visited[current->vertex]) {
            DFSUtil(graph, current->vertex, visited);
        }
        current = current->next;
    }
}

void DFS(Graph* graph, int startVertex) {
    int* visited = (int*)malloc(graph->numVertices * sizeof(int));
    for (int i = 0; i < graph->numVertices; ++i) {
        visited[i] = 0; // Initialize all vertices as not visited
    }

    printf("Depth-First Search (DFS) starting from vertex %d: ", startVertex);
    DFSUtil(graph, startVertex, visited);

    free(visited);
    printf("\n");
}

void BFS(Graph* graph, int startVertex) {
    int* visited = (int*)malloc(graph->numVertices * sizeof(int));
    for (int i = 0; i < graph->numVertices; ++i) {
        visited[i] = 0; // Initialize all vertices as not visited
    }

    int queue[MAX_VERTICES];
    int front = 0, rear = 0;

    visited[startVertex] = 1;
    printf("Breadth-First Search (BFS) starting from vertex %d: ", startVertex);
    printf("%d ", startVertex);
    queue[rear++] = startVertex;

    while (front < rear) {
        int currentVertex = queue[front++];

        Node* current = graph->array[currentVertex].head;
        while (current != NULL) {
            if (!visited[current->vertex]) {
                visited[current->vertex] = 1;
                printf("%d ", current->vertex);
                queue[rear++] = current->vertex;
            }
            current = current->next;
        }
    }

    free(visited);
    printf("\n");
}

void displayAdjList(Graph* graph) {
    printf("\nAdjacency List:\n");
    for (int i = 0; i < graph->numVertices; ++i) {
        printf("Vertex %d: ", i);
        Node* current = graph->array[i].head;
        while (current != NULL) {
            printf("%d -> ", current->vertex);
            current = current->next;
        }
        printf("NULL\n");
    }
}

void displayAdjMatrix(Graph* graph) {
    printf("\nAdjacency Matrix:\n");
    for (int i = 0; i < graph->numVertices; ++i) {
        for (int j = 0; j < graph->numVertices; ++j) {
            int isEdge = 0;
            Node* current = graph->array[i].head;
            while (current != NULL) {
                if (current->vertex == j) {
                    isEdge = 1;
                    break;
                }
                current = current->next;
            }
            printf("%d ", isEdge);
        }
        printf("\n");
    }
}

int main() {
    int numVertices, choice, src, dest, startVertex;

    printf("Enter the number of vertices in the graph: ");
    scanf("%d", &numVertices);

    Graph* graph = createGraph(numVertices);

    do {
        printf("\n------ Directed Graph Operations ------\n");
        printf("1. Add Edge\n");
        printf("2. Depth-First Search (DFS)\n");
        printf("3. Breadth-First Search (BFS)\n");
        printf("4. Display (Adjacency List)\n");
        printf("5. Display (Adjacency Matrix)\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter source and destination vertices for the edge: ");
                scanf("%d %d", &src, &dest);
                addEdge(graph, src, dest);
                break;

            case 2:
                printf("Enter the starting vertex for DFS: ");
                scanf("%d", &startVertex);
                DFS(graph, startVertex);
                break;

            case 3:
                printf("Enter the starting vertex for BFS: ");
                scanf("%d", &startVertex);
                BFS(graph, startVertex);
                break;

            case 4:
                displayAdjList(graph);
                break;

            case 5:
                displayAdjMatrix(graph);
                break;

            case 0:
                printf("Exiting program.\n");
                break;

            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }
    } while (choice != 0);

    return 0;
}
