#include <stdio.h>
#include <stdlib.h>

struct Node {
    int coeff;
    int pow;
    struct Node* next;
};

void readPolynomial(struct Node** poly, int n) {
    for (int i = 0; i < n; i++) {
        struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
        printf("\nEnter the coefficient of term %d: ", i + 1);
        scanf("%d", &temp->coeff);
        printf("\nEnter the power of term %d: ", i + 1);
        scanf("%d", &temp->pow);
        temp->next = NULL;
        if (*poly == NULL) {
            *poly = temp;
        } else {
            struct Node* p = *poly;
            while (p->next != NULL) {
                p = p->next;
            }
            p->next = temp;
        }
    }
}

void displayPolynomial(struct Node* poly) {
    printf("\nPolynomial expression is: ");
    while (poly != NULL) {
        printf("%dX^%d", poly->coeff, poly->pow);
        poly = poly->next;
        if (poly != NULL) {
            printf("+");
        }
    }
}

void addPolynomials(struct Node** result, struct Node* first, struct Node* second) {
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    temp->next = NULL;
    *result = temp;
    while (first && second) {
        if (first->pow > second->pow) {
            temp->coeff = first->coeff;
            temp->pow = first->pow;
            first = first->next;
        } else if (first->pow < second->pow) {
            temp->coeff = second->coeff;
            temp->pow = second->pow;
            second = second->next;
        } else {
            temp->coeff = first->coeff + second->coeff;
            temp->pow = first->pow;
            first = first->next;
            second = second->next;
        }
        if (first && second) {
            temp->next = (struct Node*)malloc(sizeof(struct Node));
            temp = temp->next;
            temp->next = NULL;
        }
    }
    while (first || second) {
        temp->next = (struct Node*)malloc(sizeof(struct Node));
        temp = temp->next;
        temp->next = NULL;
        if (first) {
            temp->coeff = first->coeff;
            temp->pow = first->pow;
            first = first->next;
        }
        if (second) {
            temp->coeff = second->coeff;
            temp->pow = second->pow;
            second = second->next;
        }
    }
}

void displayResult(struct Node* result) {
    printf("\nResultant polynomial is: \n");
    while (result != NULL) {
        printf("%d  ", result->coeff);
        printf("%d  ", result->pow);
        result = result->next;
    }
}

int main() {
    struct Node* first = NULL;
    struct Node* second = NULL;
    struct Node* result = NULL;
    int n1, n2;
    int choice;
    do {
        printf("\nMenu:\n");
        printf("1. Enter first polynomial\n");
        printf("2. Enter second polynomial\n");
        printf("3. Add polynomials\n");
        printf("4. Display result\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);
        switch (choice) {
            case 1:
                printf("\nEnter the number of terms in first polynomial: ");
                scanf("%d", &n1);
                readPolynomial(&first, n1);
                break;
            case 2:
                printf("\nEnter the number of terms in second polynomial: ");
                scanf("%d", &n2);
                readPolynomial(&second, n2);
                break;
            case 3:
                addPolynomials(&result, first, second);
                printf("\nPolynomials added successfully!\n");
                break;
            case 4:
                displayResult(result);
                break;
            case 5:
                printf("\nExiting program...\n");
                break;
            default:
                printf("\nInvalid choice! Please try again.\n");
        }
    } while (choice != 7);
    return 0;
}
