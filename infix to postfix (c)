#include <stdio.h>
#include <string.h>
#include <math.h>
#include <ctype.h>

#define max 100
#define n 100

struct Stack {
    char items[n];
    int top;
};

void initialize(struct Stack* stack) {
    stack->top = -1;
}

void push(struct Stack* stack, char item) {
    if (stack->top == n - 1) {
        printf("Stack overflow\n");
    } else {
        stack->items[++stack->top] = item;
    }
}

char pop(struct Stack* stack) {
    if (stack->top == -1) {
        return '\0'; 
    } else {
        return stack->items[stack->top--];
    }
}

int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    else if (op == '*' || op == '/')
        return 2;
    else if (op == '^')
        return 3;
    else
        return 0;
}

int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

void infixToPostfix(char* infix, char* postfix) {
    struct Stack stack;
    initialize(&stack);

    int len = strlen(infix);
    int index = 0;

    for (int i = 0; i < len; i++) {
        char ch = infix[i];
        if (ch == ' ' || ch == '\t') {
            continue;
        } else if (isalnum(ch)) {
            postfix[index++] = ch;
        } else if (ch == '(') {
            push(&stack, ch);
        } else if (ch == ')') {
            while (stack.top != -1 && stack.items[stack.top] != '(') {
                postfix[index++] = pop(&stack);
            }
            if (stack.top != -1 && stack.items[stack.top] == '(') {
                pop(&stack); 
            }
        } else if (isOperator(ch)) {
            while (stack.top != -1 && precedence(stack.items[stack.top]) >= precedence(ch)) {
                postfix[index++] = pop(&stack);
            }
            push(&stack, ch);
        }
    }

    while (stack.top != -1) {
        postfix[index++] = pop(&stack);
    }
    postfix[index] = '\0';
}

double evaluatePostfix(char* postfix) {
    struct Stack stack;
    initialize(&stack);

    int len = strlen(postfix);

    for (int i = 0; i < len; i++) {
        char ch = postfix[i];
        if (isalpha(ch)) {
            double value;
            printf("Enter the value of variable '%c': ", ch);
            scanf("%lf", &value);
            push(&stack, value);
        } else if (isdigit(ch)) {
            push(&stack, ch - '0');  // Convert character to integer and push onto the stack
        } else if (isOperator(ch)) {
            double operand2 = pop(&stack);
            double operand1 = pop(&stack);
            double result;

            switch (ch) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    result = operand1 / operand2;
                    break;
                case '^':
                    result = pow(operand1, operand2);
                    break;
            }

            push(&stack, result);  // Push the result back onto the stack
        }
    }

    return pop(&stack);  // The final result will be at the top of the stack
}



int main() {
    char infix[max];
    char postfix[max];

    while (1) {
        printf("\nMenu:\n");
        printf("1. Enter an infix expression\n");
        printf("2. Convert to postfix and evaluate\n");
        printf("3. Exit\n");

        int choice;
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter an infix expression: ");
                scanf(" %[^\n]", infix);
                break;
            case 2:
                infixToPostfix(infix, postfix);
                printf("Postfix expression: %s\n", postfix);
                double result = evaluatePostfix(postfix);
                printf("Result: %.2f\n", result);
                break;
            case 3:
                printf("Goodbye!\n");
                return 0;
            default:
                printf("Invalid choice. Please enter a valid option.\n");
                break;
        }
    }

    return 0;
}
