#include <stdio.h>
#include <string.h>
#include <math.h>
#include <ctype.h>

#define n 100

char infix[n];
char postfix[n];
char stack[n];
int top = -1;

int precedence(char op) {
    if (op == '+' || op == '-')
        return 1;
    else if (op == '*' || op == '/')
        return 2;
    else if (op == '^')
        return 3;
    else
        return 0;
}

void push(char op) {
    if (top >= n - 1) {
        printf("Stack overflow\n");
        return;
    }
    stack[++top] = op;
}

char pop() {
    if (top == -1) {
        printf("Stack underflow\n");
        return '\0';
    }
    return stack[top--];
}

int isOperator(char ch) {
    return (ch == '+' || ch == '-' || ch == '*' || ch == '/' || ch == '^');
}

void infixToPostfix() {
    int len = strlen(infix);
    int index = 0;

    for (int i = 0; i < len; i++) {
        char ch = infix[i];
        if (ch == ' ' || ch == '\t') {
            continue;
        } else if (isdigit(ch) || (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z')) {
            postfix[index++] = ch;
        } else if (isOperator(ch)) {
            while (top != -1 && precedence(stack[top]) >= precedence(ch)) {
                postfix[index++] = pop();
            }
            push(ch);
        } else if (ch == '(') {
            push(ch);
        } else if (ch == ')') {
            while (top != -1 && stack[top] != '(') {
                postfix[index++] = pop();
            }
            pop();
        }
    }

    while (top != -1) {
        postfix[index++] = pop();
    }
    postfix[index] = '\0';
}

double evaluatePostfix() {
    int len = strlen(postfix);
    double stack[n];
    int top = -1;

    for (int i = 0; i < len; i++) {
        char ch = postfix[i];
        if (isdigit(ch)) {
            stack[++top] = ch - '0';
        } else if (isOperator(ch)) {
            double operand2 = stack[top--];
            double operand1 = stack[top--];
            double result;

            switch (ch) {
                case '+':
                    result = operand1 + operand2;
                    break;
                case '-':
                    result = operand1 - operand2;
                    break;
                case '*':
                    result = operand1 * operand2;
                    break;
                case '/':
                    result = operand1 / operand2;
                    break;
                case '^':
                    result = pow(operand1, operand2);
                    break;
            }

            stack[++top] = result;
        }
    }

    return stack[top];
}

int main() {
    printf("Enter an infix expression: ");
    scanf("%[^\n]", infix);

    infixToPostfix();

    printf("Postfix expression: %s\n", postfix);

    double result = evaluatePostfix();
    printf("Result: %.2f\n", result);

    return 0;
}
