#include <stdio.h>
#include <stdlib.h>

struct Node {
    int data;
    struct Node* next;
};

struct Node* head = NULL;

void display() {
    struct Node* current = head;
    if (current == NULL) {
        printf("The list is empty.\n");
        return;
    }

    printf("Linked List: ");
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

void insertAtBeginning(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = head;
    head = newNode;
    printf("Inserted %d at the beginning.\n", data);
}

void insertAtEnd(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;

    if (head == NULL) {
        head = newNode;
    } else {
        struct Node* current = head;
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }

    printf("Inserted %d at the end.\n", data);
}

void insertAfterNode(int data, int key) {
    struct Node* current = head;
    while (current != NULL && current->data != key) {
        current = current->next;
    }
    if (current == NULL) {
        printf("Node with data %d not found.\n", key);
        return;
    }

    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = current->next;
    current->next = newNode;
    printf("Inserted %d after %d.\n", data, key);
}

void deleteFromBeginning() {
    if (head == NULL) {
        printf("The list is empty. Nothing to delete.\n");
        return;
    }

    struct Node* temp = head;
    head = head->next;
    free(temp);
    printf("Deleted a node from the beginning.\n");
}

void deleteFromEnd() {
    if (head == NULL) {
        printf("The list is empty. Nothing to delete.\n");
        return;
    }

    if (head->next == NULL) {
        free(head);
        head = NULL;
        printf("Deleted the only node in the list.\n");
        return;
    }

    struct Node* current = head;
    while (current->next->next != NULL) {
        current = current->next;
    }

    struct Node* temp = current->next;
    current->next = NULL;
    free(temp);
    printf("Deleted a node from the end.\n");
}

void deleteNode(int key) {
    if (head == NULL) {
        printf("The list is empty. Nothing to delete.\n");
        return;
    }

    if (head->data == key) {
        struct Node* temp = head;
        head = head->next;
        free(temp);
        printf("Deleted a node with data %d.\n", key);
        return;
    }

    struct Node* current = head;
    while (current->next != NULL && current->next->data == key) {
        current = current->next;
    }

    if (current->next == NULL) {
        printf("Node with data %d not found.\n", key);
        return;
    }

    struct Node* temp = current->next;
    current->next = current->next->next;
    free(temp);
    printf("Deleted a node with data %d.\n", key);
}

int main() {
    int choice, data, key;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Insert at the beginning\n");
        printf("2. Insert at the end\n");
        printf("3. Insert after a specified node\n");
        printf("4. Delete from the beginning\n");
        printf("5. Delete from the end\n");
        printf("6. Delete a specified node\n");
        printf("7. Display\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter data to insert at the beginning: ");
                scanf("%d", &data);
                insertAtBeginning(data);
                break;
            case 2:
                printf("Enter data to insert at the end: ");
                scanf("%d", &data);
                insertAtEnd(data);
                break;
            case 3:
                printf("Enter data to insert: ");
                scanf("%d", &data);
                printf("Enter the key (data after which to insert): ");
                scanf("%d", &key);
                insertAfterNode(data, key);
                break;
            case 4:
                deleteFromBeginning();
                break;
            case 5:
                deleteFromEnd();
                break;
            case 6:
                printf("Enter the key (data to delete): ");
                scanf("%d", &key);
                deleteNode(key);
                break;
            case 7:
                display();
                break;
            case 8:
                exit(0);
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    return 0;
}
