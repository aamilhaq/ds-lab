#include <stdio.h>
#include <stdlib.h>

#define SIZE 10

typedef struct {
    int key;
    int value;
} Node;

Node hashTable[SIZE];

void initializeHashTable() {
    for (int i = 0; i < SIZE; i++) {
        hashTable[i].key = -1; 
    }
}

int hashFunction(int key) {
    return key % SIZE;
}

void insertLinearProbing(int key, int value) {
    int index = hashFunction(key);

    while (hashTable[index].key != -1) {
        index = (index + 1) % SIZE; 
    }

    hashTable[index].key = key;
    hashTable[index].value = value;
}

void insertQuadraticProbing(int key, int value) {
    int index = hashFunction(key);
    int i = 1;

    while (hashTable[index].key != -1) {
        index = (index + i * i) % SIZE; 
        i++;
    }

    hashTable[index].key = key;
    hashTable[index].value = value;
}

int search(int key) {
    int index = hashFunction(key);
    int i = 1;

    while (hashTable[index].key != -1) {
        if (hashTable[index].key == key) {
            return index; 
        }

        index = (index + i * i) % SIZE; 
        i++;
    }

    return -1; 
}

void delete(int key) {
    int index = search(key);

    if (index != -1) {
        hashTable[index].key = -1; 
        printf("Key %d deleted successfully.\n", key);
    } else {
        printf("Key %d not found.\n", key);
    }
}

void displayHashTable() {
    printf("\nHash Table:\n");
    printf("Index\tKey\tValue\n");
    for (int i = 0; i < SIZE; i++) {
        printf("%d\t%d\t%d\n", i, hashTable[i].key, hashTable[i].value);
    }
}

int main() {
    int choice, key, value;

    initializeHashTable();

    do {
        printf("\n------ Hash Table Operations ------\n");
        printf("1. Insert (Linear Probing)\n");
        printf("2. Insert (Quadratic Probing)\n");
        printf("3. Search\n");
        printf("4. Delete\n");
        printf("5. Display\n");
        printf("0. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter key and value to insert: ");
                scanf("%d %d", &key, &value);
                insertLinearProbing(key, value);
                break;

            case 2:
                printf("Enter key and value to insert: ");
                scanf("%d %d", &key, &value);
                insertQuadraticProbing(key, value);
                break;

            case 3:
                printf("Enter key to search: ");
                scanf("%d", &key);
                if (search(key) != -1) {
                    printf("Key %d found.\n", key);
                } else {
                    printf("Key %d not found.\n", key);
                }
                break;

            case 4:
                printf("Enter key to delete: ");
                scanf("%d", &key);
                delete(key);
                break;

            case 5:
                displayHashTable();
                break;

            case 0:
                printf("Exiting program.\n");
                break;

            default:
                printf("Invalid choice. Please enter a valid option.\n");
        }

    } while (choice != 0);

    return 0;
}
